htot <- x / (1+st/Ks_i)
}
else if(phs=="T")
{
hfree <- x * (1+st/Ks_i)
htot <- x
}
else if(phs=="SWS")
{
hfree <- x * (1 + st/Ks_i + fluo/Kff_i)
htot <- hfree / (1+st/Ks_i)
}
hso4 <- st/(1+Ks_i/hfree)
hf <- fluo/(1+Kf_i/htot)
############
OUT <- hco3+2*co3+boh4+oh+hpo4+2*po4+siooh3-hfree-hso4-hf-h3po4-alk
OUT
}
# Calculate [H+] from [CO2] and total alk
h <- rep(NA, length(i_flag_24))
j <- 1
for(i in (i_flag_24))
{
# Parameters used by function fAlk defined above and called below through uniroot()
K1_i <- K1[i]
K2_i <- K2[i]
K1p_i <- K1p[i]
K2p_i <- K2p[i]
K3p_i <- K3p[i]
Kb_i  <- Kb[i]
Kw_i  <- Kw[i]
Ksi_i <- Ksi[i]
Ks_i  <- Ks[i]
Kf_i  <- Kf[i]
Kff_i <- Kff[i]
Sit_i <- Sit[i]
Pt_i  <- Pt[i]
co2   <- CO2[i]
alk   <- ALK[i]
st    <- ST[i]
bor   <- BOR[i]
fluo  <- FLUO[i]
phs   <- pHscale[i]
# Calculate [H+] from total alk
h[j] <- uniroot(fALK,c(1e-10,10^(-3.5)), tol=1e-20)$root
j <- j + 1
}
HCO3[i_flag_24] <- K1[i_flag_24]*CO2[i_flag_24]/h
CO3[i_flag_24]  <- K2[i_flag_24]*HCO3[i_flag_24]/h
PH[i_flag_24]   <- -log10(h)
H[i_flag_24] <- h
DIC[i_flag_24]  <- CO2[i_flag_24] + HCO3[i_flag_24] + CO3[i_flag_24]
# ------------ case 25.) DIC and pCO2 given
# Indices of flag elements where flag = 25
i_flag_25 <- which (flag == 25)
DIC[i_flag_25] <- var2[i_flag_25]
CO2[i_flag_25] <- K0[i_flag_25]*fCO2[i_flag_25]
# Though case 25 is the same as case 5, computations are made in a different way
K <- K1[i_flag_25]/K2[i_flag_25]
b <- K*K0[i_flag_25]*fCO2[i_flag_25]
c <- (K*K0[i_flag_25]*fCO2[i_flag_25]) *
(K0[i_flag_25]*fCO2[i_flag_25]-DIC[i_flag_25])
D <- b*b - 4*c
HCO3[i_flag_25] <- (1/2)*(-b + sqrt(D))
CO3[i_flag_25]  <- DIC[i_flag_25] - CO2[i_flag_25] - HCO3[i_flag_25]
h <- K1[i_flag_25]*CO2[i_flag_25]/HCO3[i_flag_25]
PH[i_flag_25] <- -log10(h)
H[i_flag_25] <- h
# ------------ CALCULATION OF ALK in cases
cases <- c(1, 2, 3, 5, 6, 7, 9, 10, 12, 14, 21, 22, 23, 25)
# Indices of flag elements in these cases
i_flag <- which (flag %in% cases)
h <- H[i_flag]
# HCO3[i_flag] <- DIC[i_flag]*h*K1[i_flag]/(h*h + K1[i_flag]*h + K1[i_flag]*K2[i_flag])
# CO3[i_flag]  <- HCO3[i_flag] * K2[i_flag] / h
boh4 <- BOR[i_flag]/(1+h/Kb[i_flag])
oh <- Kw[i_flag]/h
temp <- h^3 + K1p[i_flag]*h^2 + K1p[i_flag]*K2p[i_flag]*h + K1p[i_flag]*K2p[i_flag]*K3p[i_flag]
h3po4 <- Pt[i_flag]*(h^3) / temp
hpo4  <- Pt[i_flag]*K1p[i_flag]*K2p[i_flag]*h / temp
po4   <- Pt[i_flag]*K1p[i_flag]*K2p[i_flag]*K3p[i_flag] / temp
siooh3 <- Sit[i_flag]/(1+h/Ksi[i_flag])
## calculate Hfree anf Htot
hfree <- rep(NA, length(i_flag))
htot  <- rep(NA, length(i_flag))
sc <- pHscale[i_flag]
st <- ST[i_flag]
ks  <- Ks[i_flag]
fluo <- FLUO[i_flag]
kff  <- Kff[i_flag]
# Where pHscale=="F", pHscale = free scale
i_sc_F <- which (sc == "F")
hfree[i_sc_F] <- h[i_sc_F]
htot[i_sc_F]  <- h[i_sc_F] / (1+st[i_sc_F]/ks[i_sc_F])
# Where pHscale=="T", pHscale = total scale
i_sc_T <- which (sc == "T")
hfree[i_sc_T] <- h[i_sc_T] * (1+st[i_sc_T]/ks[i_sc_T])
htot[i_sc_T]  <- h[i_sc_T]
# Where pHscale=="SWS", pHscale = SW scale
i_sc_S <- which (sc == "SWS")
hfree[i_sc_S] <- h[i_sc_S] * (1 + st[i_sc_S]/ks[i_sc_S] + fluo[i_sc_S]/kff[i_sc_S])
htot[i_sc_S]  <- hfree[i_sc_S] / (1+st[i_sc_S]/ks[i_sc_S])
hso4 <- st/(1+ks/hfree)
hf   <- fluo/(1+Kf[i_flag]/htot)
ALK[i_flag]  <- HCO3[i_flag] + 2*CO3[i_flag] + boh4+oh+hpo4+2*po4+siooh3-hfree-hso4-hf-h3po4
##########################################################
# CALCULATION OF ARAGONITE AND CALCITE SATURATION STATE  #
##########################################################
Oa  <- ((0.01028*(S/35))*CO3)/Kspa
Oc  <- ((0.01028*(S/35))*CO3)/Kspc
#PCO2 and fCO2 converted in microatmosphere
pCO2 <- pCO2*1e6
fCO2 <- fCO2*1e6
RES <- data.frame(flag,S,T,Patm,P,PH,CO2,pCO2,fCO2,HCO3,CO3,DIC,ALK,Oa,Oc)
names(RES) <- c("flag", "S", "T", "Patm", "P", "pH", "CO2", "pCO2", "fCO2", "HCO3", "CO3", "DIC", "ALK", "OmegaAragonite", "OmegaCalcite")
return(RES)
}
buffer(flag=flag, var1=var1, var2=var2)
which (flag >= 21 & flag <= 25)
i_flag <- which (flag >= 21 & flag <= 25)
pCO2[i_flag] <- var1[i_flag] * 1e-6
carb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Pt=0, Sit=0,
pHscale="T", kf="pf", k1k2="l", ks="d", b="l10")
flag <- c(8, 2, 8)
var1 <- c(8.2, 7.477544e-06, 8.2)
var2 <- c(0.002343955, 0.001649802, 2400e-6)
S <- c(35, 35, 30)
T <- c(25, 25, 30)
P <- c(0, 0, 0)
Pt <- c(0, 0, 0)
Sit <- c(0, 0, 0)
kf <- c("pf", "pf", "pf")
k1k2 <- c("l", "l", "l")
pHscale <- c("T", "T", "T")
b <- c("l10", "l10", "l10")
carb(flag=flag, var1=var1, var2=var2, S=S, T=T, P=P,
Pt=Pt, Sit=Sit, kf=kf, k1k2=k1k2, pHscale=pHscale, b=b)
flag <- c((1:15), (21:25))
var1 <- c(8.200000, 7.308171e-06, 7.308171e-06, 7.308171e-06, 7.308171e-06,
8.2, 8.2, 8.2, 8.2, 0.001646857, 0.001646857, 0.001646857, 0.0002822957,
0.0002822957, 0.00234, 258.2164, 258.2164, 258.2164, 258.2164, 258.2164 )
var2 <- c(7.308171e-06, 0.001646857, 0.0002822957, 0.00234, 0.001936461,
0.001646857, 0.0002822957, 0.00234, 0.001936461, 0.0002822957,
0.00234, 0.001936461,  0.00234, 0.001936461, 0.001936461, 8.2,
0.001646857, 0.0002822957, 0.00234, 0.001936461)
carb(flag=flag, var1=var1, var2=var2)
data(seacarb_test_P0)    #test data set for P=0 (surface)
tab <- seacarb_test_P0
## method 1 using the column numbers
carb(flag=tab[[1]], var1=tab[[2]], var2=tab[[3]], S=tab[[4]], T=tab[[5]],
P=tab[[6]], Sit=tab[[8]], Pt=tab[[7]])
flag-flag2
flag <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 23, 24, 25)
flag2 <- c((1:15), (21:25))
flag-flag2
for(i in (flag)) {
print(buffer(flag=flag[i], var1=var1[i], var2=var2[i]))
}
# Copyright (C) 2008 Jean-Marie Epitalon and Jean-Pierre Gattuso and Heloise Lavigne and Aurelien Proye
# with a most valuable contribution of Bernard Gentili <gentili@obs-vlfr.fr>
# and valuable suggestions from Jean-Marie Epitalon <epitalon@lsce.saclay.cea.fr>
#
# This file is part of seacarb.
#
# Seacarb is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or any later version.
#
# Seacarb is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with seacarb; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#
buffer <-
function(flag, var1, var2, S=35, T=25, Patm=1, P=0, Pt=0, Sit=0, k1k2='x', kf='x', ks="d", pHscale="T", b="l10"){
n <- max(length(flag), length(var1), length(var2), length(S), length(T), length(P), length(Pt), length(Sit), length(k1k2), length(kf), length(pHscale), length(ks), length(b))
if(length(flag)!=n){ flag <- rep(flag[1],n)}
if(length(var1)!=n){ var1 <- rep(var1[1],n)}
if(length(var2)!=n){ var2 <- rep(var2[1],n)}
if(length(S)!=n){ S <- rep(S[1],n)}
if(length(T)!=n){ T <- rep(T[1],n)}
if(length(Patm)!=n){ P <- rep(Patm[1],n)}
if(length(P)!=n){ P <- rep(P[1],n)}
if(length(Pt)!=n){ Pt <- rep(Pt[1],n)}
if(length(Sit)!=n){ Sit <- rep(Sit[1],n)}
if(length(k1k2)!=n){ k1k2 <- rep(k1k2[1],n)}
if(length(kf)!=n){ kf <- rep(kf[1],n)}
if(length(ks)!=n){ ks <- rep(ks[1],n)}
if(length(pHscale)!=n){pHscale <- rep(pHscale[1],n)}
if(length(b)!=n){ b <- rep(b[1],n)}
# if the concentrations of total silicate and total phosphate are NA
# they are set at 0
Sit[is.na(Sit)] <- 0
Pt[is.na(Pt)] <- 0
Carb <- carb(flag=flag, var1=var1, var2=var2, S=S, T=T, Patm=Patm, P=P, Pt=Pt, Sit=Sit, k1k2=k1k2, kf=kf, ks=ks, pHscale=pHscale, b=b)
PH   <- Carb[5]
h    <- 10^(-PH)
CO2  <- Carb[6]
pCO2 <- Carb[7]
fCO2 <- Carb[8]
HCO3 <- Carb[9]
CO3  <- Carb[10]
DIC  <- Carb[11]
ALK  <- Carb[12]
Oa   <- Carb[13]
Oc   <- Carb[14]
#-------Constantes----------------
tk = 273.15;           # [K] (for conversion [deg C] <-> [K])
TK = T + tk;           # TK [K]; T[C]
#---- issues de equic----
Cl = S / 1.80655;      # Cl = chlorinity; S = salinity (per mille)
cl3 = Cl^(1/3);
ION = 0.00147 + 0.03592 * Cl + 0.000068 * Cl * Cl;   # ionic strength
iom0 = 19.924*S/(1000-1.005*S);
ST = 0.14/96.062/1.80655*S;   # (mol/kg soln) total sulfate
BOR = bor(S=S , b=b);   # (mol/kg), DOE94 boron total
FLUO = (7*(S/35))*1e-5        # (mol/kg), DOE94 fluoride total
#---------------------------------------------------------------------
#--------------------- calcul des K ----------------------------------
#---------------------------------------------------------------------
# Ks (free pH scale) at zero pressure and given pressure
Ks_P0 <- Ks(S=S, T=T, P=0, ks=ks)
Ks    <- Ks(S=S, T=T, P=P, ks=ks)
# Kf on free pH scale
Kff <- Kf(S=S, T=T, P=P, pHscale="F", kf=kf, Ks_P0, Ks)
# Kf on given pH scale
Kf <- Kf(S=S, T=T, P=P, pHscale=pHscale, kf=kf, Ks_P0, Ks)
# Conversion factor from total to SWS pH scale at zero pressure
ktotal2SWS_P0 <- kconv(S=S,T=T,P=0,kf=kf,Ks=Ks,Kff=Kff)$ktotal2SWS
# Conversion factor from SWS to chosen pH scale
conv <- kconv(S=S,T=T,P=P,kf=kf,Ks=Ks,Kff=Kff)
kSWS2chosen <- rep(1.,n)
kSWS2chosen [pHscale == "T"] <- conv$kSWS2total [pHscale == "T"]
kSWS2chosen [pHscale == "F"] <- conv$kSWS2free [pHscale == "F"]
K1 <- K1(S=S, T=T, P=P, pHscale=pHscale, k1k2=k1k2, kSWS2chosen, ktotal2SWS_P0)
K2 <- K2(S=S, T=T, P=P, pHscale=pHscale, k1k2=k1k2, kSWS2chosen, ktotal2SWS_P0)
Kw <- Kw(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)
K0 <- K0(S=S, T=T, P=P)
Kb <- Kb(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen, ktotal2SWS_P0)
K1p <- K1p(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)
K2p <- K2p(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)
K3p <- K3p(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)
Ksi <- Ksi(S=S, T=T, P=P, pHscale=pHscale, kSWS2chosen)
Kspa <- Kspa(S=S, T=T, P=P)
Kspc <- Kspc(S=S, T=T, P=P)
rho <- rho(S=S,T=T,P=P)
#---------------------------------------------------------------------
#--------------------    buffer effects    ---------------------------
#---------------------------------------------------------------------
DD=-((-Kb*BOR)/((h+Kb)*(h+Kb)))-(-Kw/((h)*(h)))+1;
A= (2*K2*(2*CO3+HCO3)+h*(h+2*K2)*DD)/((h+2*K2)*(h+2*K2));
B=( ( (2*CO3+HCO3) * h)/((h+2*K2)*K1) + (h/K1)* A );
C= (-K2*(2*CO3+HCO3)+K2*(2*K2+h)*DD)/((h+2*K2)*(h+2*K2));
PhiD=-1/(h*log(10) * ( B+A+C ) );
BetaD=-h*log(10)*DIC/CO2*B*PhiD;
Q=(h+2*K2);
V=(Kb*BOR)/((h+Kb)*(h+Kb)) + Kw/(h*h)+1;
DB=(( K2*(2*CO3+HCO3)+ Q*V *(h+K2)+(h/K1)*( (2*CO3+HCO3)*Q+2*K2*(2*CO3+HCO3)+h*Q*V))/Q)*(1/(Q-(h+K2+h*h/K1)))-((-Kb*BOR)/((h+Kb)*(h+Kb)))-(-Kw/((h)*(h)))+1;
A= (2*K2*(2*CO3+HCO3)+h*(h+2*K2)*DB)/((h+2*K2)*(h+2*K2));
B=( ( (2*CO3+HCO3) * h)/((h+2*K2)*K1) + (h/K1)* A );
C= (-K2*(2*CO3+HCO3)+K2*(2*K2+h)*DB)/((h+2*K2)*(h+2*K2));
PhiB=-1/(h*log(10) * ( B+A+C ) );
BetaB=-h*log(10)*DIC/CO2*B*PhiB;
DC=2*(( K2*(2*CO3+HCO3)+ Q*V *(h+K2)+(h/K1)*( (2*CO3+HCO3)*Q+2*K2*(2*CO3+HCO3)+h*Q*V))/Q)*(1/(Q-2*(h+K2+h*h/K1)))-((-Kb*BOR)/((h+Kb)*(h+Kb)))-(-Kw/((h)*(h)))+1;
A= (2*K2*(2*CO3+HCO3)+h*(h+2*K2)*DC)/((h+2*K2)*(h+2*K2));
B=( ( (2*CO3+HCO3) * h)/((h+2*K2)*K1) + (h/K1)* A );
C= (-K2*(2*CO3+HCO3)+K2*(2*K2+h)*DC)/((h+2*K2)*(h+2*K2));
PhiC=-1/(h*log(10) * ( B+A+C ) );
BetaC=-h*log(10)*DIC/CO2*B*PhiC;
D1=(K1*(K1*K2-h*h)*DIC)   /  ((h*h+h*K1+K1*K2)*(h*h+h*K1+K1*K2));
D2=(-K1*K2*(2*h+K1)*DIC)  /  ((h*h+h*K1+K1*K2)*(h*h+h*K1+K1*K2));
D=D1+2*D2;
PhiH=1/ (h*log(10)* (D +(-Kb*BOR/((h+Kb)*(h+Kb)))  + (-Kw/(h*h))-1))  ;
Pi=(h*K1*(h+2*K2)*DIC)  /  ((h*h+h*K1+K1*K2)*(h*h+h*K1+K1*K2));
PiH=((-h/K0)*log(10)*Pi)*PhiH;
PiB=CO2/(K0*DIC)*BetaB;
PiD=CO2/(K0*DIC)*BetaD;
PiC=CO2/(K0*DIC)*BetaC;
col <- c("PhiD", "BetaD", "PiD", "PhiB", "BetaB", "PiB", "PhiC", "BetaC", "PiC", "PhiH", "PiH")
res <- data.frame(PhiD,BetaD,PiD,PhiB,BetaB,PiB,PhiC,BetaC,PiC,PhiH,PiH)
names(res) <- col
return(res)
}
<<<<<<< Updated upstream
buffer(flag=flag[16], var1=var1[16], var2=var2[16])
buffer(flag=flag[1], var1=var1[1], var2=var2[1])
buffer(flag=flag[17], var1=var1[17], var2=var2[17])
flag[17]
buffer(flag=22, var1=var1[17], var2=var2[17])
var1[17]
var2[17]
buffer(flag=22, var1=264.2008, var2=0.001685024)
library(seacarb)
?carb
<<<<<<< HEAD
=======
buffer(flag=flag, var1=var1, var2=var2)
flag <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 23, 24, 25)
var1 <- c(8.200000, 7.477544e-06, 7.477544e-06, 7.477544e-06, 7.477544e-06, 8.2,
8.2, 8.2, 8.2, 0.001685024, 0.001685024, 0.001685024,  0.0002888382,
0.0002888382, 0.002391252, 264.2008, 264.2008, 264.2008, 264.2008, 264.2008)
var2 <- c(7.477544e-06, 0.001685024, 0.0002888382, 0.002391252, 0.001981340,
0.001685024, 0.0002888382, 0.002391252, 0.001981340, 0.0002888382, 0.002391252,
0.001981340,  0.002391252, 0.001981340, 0.001981340, 8.2, 0.001685024,
0.0002888382, 0.002391252, 0.001981340)
buffer(flag=flag, var1=var1, var2=var2)
i <- 15
print(buffer(flag=flag[i], var1=var1[i], var2=var2[i]))
i <- 16
print(buffer(flag=flag[i], var1=var1[i], var2=var2[i]))
# Copyright (C) 2010  Héloïse Lavigne and Jean-Pierre Gattuso
# with a most valuable contribution of Bernard Gentili <gentili@obs-vlfr.fr>
# and valuable suggestions from Jean-Marie Epitalon <epitalon@lsce.saclay.cea.fr>
#
# This file is part of seacarb.
#
# Seacarb is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or any later version.
#
# Seacarb is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with seacarb; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#
#
f2pCO2 <- function(T=25, Patm=1, P=0, fCO2){
tk <- 273.15;           # [K] (for conversion [deg C] <-> [K])
TK <- T + tk;           # TK [K]; T[C]
Phydro_atm = P / 1.01325  # convert hydrostatic pressure from bar to atm (1.01325 bar / atm)
Ptot = Patm + Phydro_atm  # total pressure (in atm) = atmospheric pressure + hydrostatic pressure
# Original "seacarb" f2pCO2 calculation:
# B <- (-1636.75+12.0408*TK-0.0327957*(TK*TK)+0.0000316528*(TK*TK*TK))*1e-6
# pCO2 <-  fCO2*(1/exp((1*100000)*(B+2*(57.7-0.118*TK)*1e-6)/(8.314*TK)))
# Above calculation:
# - uses incorrect R (wrong units, incompatible with pressure in atm)
# - neglects a term "x2" (see below)
# - assumes pressure is always 1 atm (wrong for subsurface)
# Corrected approach to compute the fugacity coefficient, with which we convert pCO2 <-> fCO2
Phydro_atm = P / 1.01325  # convert hydrostatic pressure from bar to atm (1.01325 bar / atm)
Ptot = Patm + Phydro_atm  # total pressure (in atm)
R = 82.05736              # (cm3 * atm) / (mol * K)  CODATA (2006)
# To compute fugcoeff, we need 3 other terms (B, Del, xc2) in addition to 3 others above (TK, Ptot, R)
B   <- -1636.75 + 12.0408*TK - 0.0327957*TK^2 + 0.0000316528*TK^3
Del <- 57.7-0.118*TK
# "x2" term often neglected (assumed = 1) in applications of Weiss's (1974) equation 9
# x2 = 1 - x1 = 1 - xCO2 (it is close to 1, but not quite)
# Let's assume that xCO2 = fCO2. Resulting fugcoeff is identical to 8th digit after the decimal.
xCO2approx <- fCO2
xc2 <- (1 - xCO2approx*1e-6)^2
fugcoeff = exp( Ptot*(B + 2*xc2*Del)/(82.057*TK) )
pCO2 <- fCO2 / fugcoeff
return(pCO2)
}
# Copyright (C) 2010  Héloïse Lavigne and Jean-Pierre Gattuso
# with a most valuable contribution of Bernard Gentili <gentili@obs-vlfr.fr>
# and valuable suggestions from Jean-Marie Epitalon <epitalon@lsce.saclay.cea.fr>
#
# This file is part of seacarb.
#
# Seacarb is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or any later version.
#
# Seacarb is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with seacarb; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#
#
p2fCO2 <- function(T=25, Patm=1, P=0, pCO2){
tk <- 273.15;           # [K] (for conversion [deg C] <-> [K])
TK <- T + tk;           # TK [K]; T[C]
Phydro_atm = P / 1.01325  # convert hydrostatic pressure from bar to atm (1.01325 bar / atm)
Ptot = Patm + Phydro_atm  # total pressure (in atm) = atmospheric pressure + hydrostatic pressure
# Original "seacarb" f2pCO2 calculation:
# B <- (-1636.75+12.0408*TK-0.0327957*(TK*TK)+0.0000316528*(TK*TK*TK))*1e-6
# fCO2 <-  pCO2*(1/exp((1*100000)*(B+2*(57.7-0.118*TK)*1e-6)/(8.314*TK)))^(-1)
# Above calculation:
# - uses incorrect R (wrong units, incompatible with pressure in atm)
# - neglects a term "x2" (see below)
# - assumes pressure is always 1 atm (wrong for subsurface)
# To compute fugcoeff, we need 3 other terms (B, Del, xc2) in addition to 3 others above (TK, Ptot, R)
B   <- -1636.75 + 12.0408*TK - 0.0327957*TK^2 + 0.0000316528*TK^3
Del <- 57.7-0.118*TK
# "x2" term often neglected (assumed = 1) in applications of Weiss's (1974) equation 9
# x2 = 1 - x1 = 1 - xCO2 (it is close to 1, but not quite)
# Let's assume that xCO2 = pCO2. Resulting fugcoeff is identical to at least 8th digit after the decimal.
xCO2approx <- pCO2
xc2 <- (1 - xCO2approx*1e-6)^2
fugcoeff = exp( Ptot*(B + 2*xc2*Del)/(82.057*TK) )
fCO2 <- pCO2 * fugcoeff
return(fCO2)
}
>>>>>>> Stashed changes
=======
install.packages(c("knitr", "pracma"))
getwd()
library(seacarb)
?carb
library(seacarb)
?carb
tab
data(seacarb_test_P0)    #test data set for P=0 (surface)
tab <- seacarb_test_P0
str§tab
str(tab)
tab <- subset(x = tab,subset = flag < 3)
tab
carb(flag=tab[[1]], var1=tab[[2]], var2=tab[[3]], S=tab[[4]], T=tab[[5]],
P=tab[[6]], Sit=tab[[8]], Pt=tab[[7]])
tab <- seacarb_test_P0[1:5,]
tab
carb(flag=tab[[1]], var1=tab[[2]], var2=tab[[3]], S=tab[[4]], T=tab[[5]],
P=tab[[6]], Sit=tab[[8]], Pt=tab[[7]])
data(seacarb_test_P0)  #test data set for P=0 (surface)
tab <- seacarb_test_P0[1:10,]
carb(flag=tab[[1]], var1=tab[[2]], var2=tab[[3]], S=tab[[4]], T=tab[[5]],
P=tab[[6]], Sit=tab[[8]], Pt=tab[[7]])
data(seacarb_test_P0)  #test data set for P=0 (surface)
tab <- seacarb_test_P0[1:20,]
carb(flag=tab[[1]], var1=tab[[2]], var2=tab[[3]], S=tab[[4]], T=tab[[5]],
P=tab[[6]], Sit=tab[[8]], Pt=tab[[7]])
seacarb_test_P0
carb(flag=tab$flag, var1=tab$var1, var2=tab$var2, S=tab$S, T=tab$T, P=tab$P, Sit=tab$Sit, Pt=tab$Pt)
str(seacarb_test_P0)
seacarb_test_P0
data(seacarb_test_P0)  #test data set for P=0 (surface)
tab <- seacarb_test_P0
carb(flag=tab[[1]], var1=tab[[2]], var2=tab[[3]], S=tab[[4]], T=tab[[5]],
P=tab[[6]], Sit=tab[[8]], Pt=tab[[7]])
## Test using a data frame
data(seacarb_test_P0)    #test data set for P=0 (surface)
tab <- seacarb_test_P0
## method 1 using the column numbers
carb(flag=tab[[1]], var1=tab[[2]], var2=tab[[3]], S=tab[[4]], T=tab[[5]],
P=tab[[6]], Sit=tab[[8]], Pt=tab[[7]])
## method 2 using the column names
carb(flag=tab$flag, var1=tab$var1, var2=tab$var2, S=tab$S, T=tab$T, P=tab$P, Sit=tab$Sit, Pt=tab$Pt)
library(seacarb)
>>>>>>> FETCH_HEAD
library(seacarb)
<<<<<<< Updated upstream
install.packages("oce")
install.packages("oce")
install.packages("testthat")
library(seacarb)
library(seacarb)
library(seacarb)
=======
install.packages(c("jsonlite", "knitr", "magrittr", "mgcv", "pracma", "R6", "RColorBrewer", "reshape2", "shiny", "tidyr"))
install.packages("ggvis")
library(ggvis)
install.packages("ggvis")
install.packages("oce")
>>>>>>> Stashed changes
install.packages(c("boot", "cluster", "codetools", "devtools", "digest", "dplyr", "foreign", "knitr", "lazyeval", "manipulate", "MASS", "Matrix", "nlme", "Rcpp", "rmarkdown", "shiny", "timeDate", "timeSeries"))
library(seacarb)
?carbb
library(seacarb)
?carbb
library(seacarb)
?carbb
carbb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0,
pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=0)
carb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0,
pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=0)
carb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0,
pHscale="T", kf="pf", k1k2="l", ks="d", b="u74")
library(seacarb)
example(carbb)
example(carb)
carb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0,
pHscale="T", kf="pf", k1k2="l", ks="d", b="u74")
carb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1, Pt=0, Sit=0,
pHscale="T", kf="pf", k1k2="l", ks="d", b="u74")
carb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Pt=0, Sit=0,
pHscale="T", kf="pf", k1k2="l", ks="d", b="u74")
carbb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1, Pt=0, Sit=0,
pHscale="T", kf="pf", k1k2="l", ks="d", b="u74")
library(seacarb)
example(carb)
example(carbb)
carb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0,
pHscale="T", kf="pf", k1k2="l", ks="d", b="u74")
carb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Pt=0, Sit=0,
pHscale="T", kf="pf", k1k2="l", ks="d", b="u74")
library(seacarb)
example(carb)
example(carbb)
install.packages("seacarb")
example(carb)
library(seacarb)
example(carb)
example(seacarb::carb)
seacarb::carb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0,
pHscale="T", kf="pf", k1k2="l", ks="d", b="u74")
library(seacarb)
rm(list=ls())
library(seacarb)
example(carb)
example(carbb)
carbb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=0)
example(bor)
carbb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=40e-6)
carbb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=c(0,40e-6))
carbb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=40e-6)
carbb(flag=8, var1=8.2, var2=0.00234, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=0)
carbb(flag=9, var1=8.2, var2=0.00220, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=40e-6)
carbb(flag=9, var1=8.2, var2=0.00220, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=0)
carbb(flag=9, var1=8.2, var2=0.00220, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=c(0,40e-6))
carbb(flag=9, var1=8.2, var2=0.00220, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=100e-6)
carbb(flag=9, var1=8.2, var2=0.00220, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=0)
carbb(flag=9, var1=8.2, var2=0.00220, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=1000e-6)
carbb(flag=9, var1=8.2, var2=0.00220, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=0)
carbb(flag=15, var1=0.00234, var2=0.00220, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=100e-6)
carbb(flag=15, var1=0.00234, var2=0.00220, S=35, T=25, P=0, Patm=1.0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d", b="u74", badd=0)
library(seacarb)
